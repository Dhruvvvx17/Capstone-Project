# -*- coding: utf-8 -*-
"""Yield&NDVI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y5Qgg9XD5XAwqJsEDnmThFLwJ4FtbQuD

# Linear Regression

-No normalization of data

-Using all the months to make the predictions

-Removed outliers
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn
from sklearn.model_selection import train_test_split

file_df = pd.read_csv('/content/combined_csv.csv')

index_names = file_df[ file_df['JANUARY_NDVI'] == -100 ].index 
# drop these row indexes 
# from dataFrame 
file_df.drop(index_names, inplace = True) 
df = file_df

# df = df.loc[((df['Crop'] == 'Onion') & (df['Season'].str.strip() == 'Kharif') )]
df = df.loc[((df['Crop'] == 'Ragi') & (df['Season'].str.strip() == 'Kharif') )]

df['Yield'].min()

# df = pd.DataFrame(np.random.randn(100, 3))

# Removing the outliers:

q = df["Yield"].quantile(0.75)
p = df["Yield"].quantile(0.25)

p,q

df = df[(df["Yield"] < q) & (df["Yield"] > p)]

X = df[['JANUARY_NDVI','FEBRUARY_NDVI','JUNE_NDVI','JULY_NDVI','AUGUST_NDVI','SEPTEMBER_NDVI','OCTOBER_NDVI','NOVEMBER_NDVI','DECEMBER_NDVI']]
Y = df['Yield']

x_train, x_test,y_train,y_test = train_test_split(X,Y,test_size =0.2)

# from sklearn import preprocessing

# min_max_scaler = preprocessing.MinMaxScaler()
# y_train = pd.DataFrame(y_train)
# y_train = min_max_scaler.fit_transform(y_train)

# y_test = y_test.to_numpy()
# y_test.reshape(-1,1)
# y_test = min_max_scaler.transform(y_test.reshape(-1,1))
# y_test

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_train,y_train)

y_pred = model.predict(x_test)

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

# y_test = pd.DataFrame(y_test)
# y_pred = pd.DataFrame(y_pred)
# df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
# df

# pd.concat([d.reset_index(drop=True) for d in [y_test, y_pred]], axis=1)
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df

import matplotlib.pyplot as plt
plt.scatter(df['Actual'], df['Predicted'])
plt.show() # Depending on whether you use IPython or interactive mode, etc.

"""# Scaling the yield data:"""

file_df = pd.read_csv('/content/combined_csv.csv')

index_names = file_df[ file_df['JANUARY_NDVI'] == -100 ].index 
# drop these row indexes from dataFrame 
file_df.drop(index_names, inplace = True) 
df = file_df

df = df.loc[((df['Crop'] == 'Ragi') & (df['Season'].str.strip() == 'Kharif') )]

"""Outliers"""

q = df["Yield"].quantile(0.75)
p = df["Yield"].quantile(0.25)

df = df[(df["Yield"] < q) & (df["Yield"] > p)]

X = df[['JANUARY_NDVI','FEBRUARY_NDVI','JUNE_NDVI','JULY_NDVI','AUGUST_NDVI','SEPTEMBER_NDVI','OCTOBER_NDVI','NOVEMBER_NDVI','DECEMBER_NDVI']]
Y = df['Yield']

x_train, x_test,y_train,y_test = train_test_split(X,Y,test_size =0.2)

from sklearn import preprocessing

min_max_scaler = preprocessing.MinMaxScaler()
y_train = pd.DataFrame(y_train)
y_train = min_max_scaler.fit_transform(y_train)
# y_train

y_test = y_test.to_numpy()
y_test.reshape(-1,1)
y_test = min_max_scaler.transform(y_test.reshape(-1,1))
# y_test

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_train,y_train)

y_pred = model.predict(x_test)

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

y_test = pd.DataFrame(y_test)
y_pred = pd.DataFrame(y_pred)

y_test = min_max_scaler.inverse_transform(y_test)
y_pred = min_max_scaler.inverse_transform(y_pred)

# pd.concat([d.reset_index(drop=True) for d in [y_test, y_pred]], axis=1)

y_test = pd.DataFrame(y_test)
y_pred = pd.DataFrame(y_pred)

df = pd.concat([d.reset_index(drop=True) for d in [y_test, y_pred]], axis=1)
df.columns = ['Actual', 'Predicted']
df

"""----------------------------------------------

Cross Validation
"""

file_df = pd.read_csv('/content/combined_csv.csv')

index_names = file_df[ file_df['JANUARY_NDVI'] == -100 ].index 
# drop these row indexes from dataFrame 
file_df.drop(index_names, inplace = True) 
df = file_df

df = df.loc[((df['Crop'] == 'Ragi') & (df['Season'].str.strip() == 'Kharif') )]

from sklearn.model_selection import cross_val_predict
from sklearn import linear_model

lr = linear_model.LinearRegression()


q = df["Yield"].quantile(0.75)
p = df["Yield"].quantile(0.25)

df = df[(df["Yield"] < q) & (df["Yield"] > p)]

X = df[['JANUARY_NDVI','FEBRUARY_NDVI','JUNE_NDVI','JULY_NDVI','AUGUST_NDVI','SEPTEMBER_NDVI','OCTOBER_NDVI','NOVEMBER_NDVI','DECEMBER_NDVI']]
Y = df['Yield']

x_train, x_test,y_train,y_test = train_test_split(X,Y,test_size =0.2)

predicted = cross_val_predict(lr, x_train, y_train, cv=3)

fig, ax = plt.subplots()
ax.scatter(y_train, predicted)
ax.plot([y_train.min(), y_train.max()], [y_train.min(), y_train.max()], 'k--', lw=4)
ax.set_xlabel('Measured')
ax.set_ylabel('Predicted')
plt.show()