# -*- coding: utf-8 -*-
"""pricePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xA7LR-UCgmKompVyena5ml0nr4NEh02M

Make sure to add Ragi_Bangalore_prices.csv before beginning
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
import numpy as np
from keras.models import Sequential
from keras.layers import Dense,  LSTM
from keras import metrics
from sklearn.model_selection import train_test_split 


# Needed for saving the model
# from sklearn.pipeline import make_pipeline
# from sklearn.preprocessing import StandardScaler
# from sklearn.linear_model import LogisticRegression
# import joblib

df = pd.read_csv('/content/Ragi_Bangalore_prices.csv')
df.shape

"""We can see that there are 39 rows and 5 columns of data.

"""

df.head()

price = df.loc[:,'MeanPrice(Rs./Quintal)']
l = len(df)
price = np.array(price)
price = price.reshape(-1,1)
plt.plot(price)
plt.xticks(range(0,df.shape[0]),df['Year'],rotation=90)
plt.show(block= False)

"""We will use shifted versions of the column Y as independent variables, that is to say use 3 delays of Y as inputs to predict the output of our data."""

X1= price[0:l-3,:] # 1st till 3rd last value
X2=price[1:l-2,:]  # 2nd till 2nd last value  
X3=price[2:l-1,:]  # 3rd till last value
price = price[3:l,:]
X= np.concatenate([X1,X2,X3],axis=1)
print(f'X shape is {X.shape}')
print(f'price shape is {price.shape}')

"""X is a list of lists here, each individual list having 3 values, ie., the time series"""

scaler = MinMaxScaler() # scaling between 0 to 1
scaler.fit(X)
X = scaler.transform(X)
scaler1 = MinMaxScaler()
scaler1.fit(price)
price = scaler1.transform(price)
X= np.reshape(X, (X.shape[0],1,X.shape[1])) # list of lists of lists (36,1,3)

X_train = X[:30]
X_test = X[6::-1]
price_train = price[:30]
price_test = price[6::-1]

# print(X_train)

# print(price_train)
inv_scaler = MinMaxScaler()
inv_scaler.min_ = scaler.min_[0]
inv_scaler.scale_ = scaler.scale_[0]

model = Sequential()
model.add(LSTM(15,activation = 'tanh',input_shape = (1,3),recurrent_activation= 'hard_sigmoid'))

model.add(Dense(1,activation='tanh'))
# model.add(Dense(8, activation='relu'))
# model.add(Dense(1, activation='sigmoid'))

# print((X_test))

model.compile(loss= 'mean_squared_error',optimizer = 'rmsprop', metrics=[metrics.MeanSquaredError()])
model.fit(X_train,price_train,epochs=1000,verbose=2)
Predict = model.predict(X_test)

newPredict = model.predict([[[0.51461039, 0.52970297, 1.]]])
# print(X_test)

# print(newPredict)

price=inv_scaler.inverse_transform(newPredict)

print("The predicted price per quintal of ragi is: Rs",round(price[0][0],2))

plt.figure(figsize=(15,10))
plt.plot(price_test,label = 'Test')
plt.plot(Predict, label = 'Prediction')
plt.legend(loc='best')
plt.show()

